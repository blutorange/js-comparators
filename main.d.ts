import { Comparable, Comparator, Equator, KeyExtractor, Maybe, Predicate } from "andross";
export declare function sort<T>(items: T[], comparator?: Comparator<T>): void;
export declare function sortStable<T>(items: T[], comparator?: Comparator<T>): void;
export declare function sortBy<T, K>(items: T[], keyExtractor: KeyExtractor<T, K>, comparator?: Comparator<T>): void;
export declare function sortStableBy<T, K>(items: T[], keyExtractor: KeyExtractor<T, K>, comparator?: Comparator<T>): void;
export declare function comparable<T extends Comparable<T>>(lhs: Maybe<T>, rhs: Maybe<T>): number;
export declare function natural<T>(lhs: Maybe<T>, rhs: Maybe<T>): number;
export declare function inverse<T>(lhs: Maybe<T>, rhs: Maybe<T>): number;
export declare function invert<T>(comparator: Comparator<T>): Comparator<T>;
export declare function byKey<T, K>(keyExtractor: KeyExtractor<T, K>, keyComparator?: Comparator<K>): Comparator<Maybe<T>>;
export declare function byProp<T>(keySpecifier: string, comparator?: Comparator<any>): Comparator<Maybe<T>>;
export declare function combine<T>(...comparators: Comparator<T>[]): Comparator<T>;
export declare const ignoreCase: Comparator<Maybe<string>>;
export declare function byThreshold(threshold?: number): Comparator<Maybe<number>>;
export declare function equals<T>(comparator?: Comparator<T>): Equator<T>;
export declare function equalTo<T>(item: T, test?: Comparator<T>): Predicate<T>;
export declare function within<T>(lower: T, upper: T, {comparator, mode}?: {
    comparator?: Comparator<T>;
    mode?: "[]" | "()" | "[)" | "(]" | "[[" | "]]" | "][";
}): Predicate<T>;
